@page "/"
@page "/menu"

@inject NavigationManager Nav

<div class="d-flex flex-column vh-100 justify-content-between text-center bg-dark text-white">
	<div class="my-auto">

		<h1 class="display-3 fw-bold">Sillyzation</h1>

		<div class="d-flex flex-column align-items-center gap-3 mt-4">
			<button class="btn btn-primary btn-lg mt-4" @onclick="OnPlay" disabled="@_isLoading">
				@if (_isLoading) {
					<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
					<p>Loading...</p>
				} else {
					<span>Play</span>
				}
			</button>
			<button class="btn btn-secondary btn-lg mt-4" @onclick="OnPlayOffline">Play Offline</button>
		</div>

	</div>

	<footer class="pb-3">
		<a href="https://github.com/neclor/sillyzation" class="text-white me-3">GitHub</a>
	</footer>
</div>

@code {
	private bool _isLoading;

	private void OnPlay() {

		Nav.NavigateTo("/lobby");

		if (_isLoading) return;
		_isLoading = true;
@*
		try {
			// Adjust this endpoint to the real server API route. Example: POST /api/lobbies
			using var resp = await Http.PostAsync("api/lobbies", null).ConfigureAwait(false);

			if (resp.IsSuccessStatusCode) {
				var content = await resp.Content.ReadAsStringAsync().ConfigureAwait(false);

				// Support responses like { "code": "abc123" } or plain "abc123"
				string code = string.Empty;
				try
				{
					using var doc = System.Text.Json.JsonDocument.Parse(content);
					var root = doc.RootElement;
					if (root.ValueKind == System.Text.Json.JsonValueKind.Object && root.TryGetProperty("code", out var p))
						code = p.GetString() ?? string.Empty;
					else if (root.ValueKind == System.Text.Json.JsonValueKind.String)
						code = root.GetString() ?? string.Empty;
					else
						code = content.Trim('"');
				}
				catch
				{
					code = content.Trim('"');
				}

				if (!string.IsNullOrWhiteSpace(code))
				{
					Nav.NavigateTo($"/lobby/{code}");
					return;
				}
			}

			// If creation failed or response invalid -> fallback to offline
		}
		catch {
			// network / CORS / server error -> fallback to offline
		}
		finally {
			_isLoading = false;
		}
		*@
	}

	private void OnPlayOffline() => Nav.NavigateTo("/lobby/offline");
}
